openapi: 3.0.0
info:
  title: Messages API
  version: '1.0'
  description: |-
    The Tidepool API is an HTTP REST API used by Tidepool clients use to communicate with the Tidepool Platform.

    For more information, see the [Getting Started](../docs/quick-start.md) section.
  contact:
    name: API Support
    url: https://support.tidepool.org/
    email: support@tidepool.org
  license:
    name: BSD-2-Clause
    url: https://github.com/tidepool-org/message-api/blob/master/LICENSE
  x-tidepool-service: https://github.com/tidepool-org/message-api/

servers:
  - url: 'https://external.integration.tidepool.org'
    description: integration
  - url: 'https://api.tidepool.org'
    description: production
  - url: 'https://dev1.dev.tidepool.org'
    description: dev1
  - url: 'https://qa1.development.tidepool.org'
    description: qa1
  - url: 'https://qa2.development.tidepool.org'
    description: qa2

tags:
  - name: Internal
    description: >-
      APIs intended for internal use by Tidepool.
  - name: Messages
    description: |-
      List, create and manage messages (also known as notes) in the user's account.

      All APIs require a valid session token provided via the `X-Tidepool-Session-Token` header.
      There is currently no unauthenticated access to messages.

      The common API input parameter `userId` is a Tidepool User ID that identifies the user whose account contains the messages.
      That user may have shared their account with (=given permission to) other users who can view and manage messages in their account.
      Therefore, in each API request the user ID identified with the session token must either a) match the `userId` parameter,
      or b) the corresponding user must have been granted the `note` permission to manage messages in the user account identified by `userId`.

      Similarly, in the API responses the `groupid` field is a Tidepool User ID that identifies the user whose account contains the messages, corresponding to the `userId` parameter in requests.
      The `userid` field identifies the user who actually created the message, corresponding to the user ID encoded within the session token.
      The message was created by the owner of the account if these two fields match.

      Each message has a unique message ID, and the messages can be threaded.
      A user can create either a new message, or create a reply to another message.
      Each message contains a `parentmessage` field that contains the message ID of previous message in the thread.
      Messages that have no `parentmessage` field value (i.e. it is `null`) are top-level messages, that is, the beginning of a message thread.

      See the Authorization API for details on how permissions are managed.

paths:
  '/message/all/{userId}':
    parameters:
      - $ref: './common/parameters/tidepooluserid.yaml'
      - $ref: './message/parameters/starttime.v1.yaml'
      - $ref: './message/parameters/endtime.v1.yaml'
    get:
      operationId: ListAllMessages
      summary: List All Messages
      description: >-
        List all messages in the user account identified by `userId`, optionally within the time range bounded by `starttime` and/or `endtime`.
      responses:
        '200':
          $ref: '#/components/responses/MessageList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - sessionToken: []
      tags:
        - Messages

  '/message/notes/{userId}':
    parameters:
      - $ref: './common/parameters/tidepooluserid.yaml'
      - $ref: './message/parameters/starttime.v1.yaml'
      - $ref: './message/parameters/endtime.v1.yaml'
    get:
      operationId: ListTopLevelMessages
      summary: List Top-Level Messages
      description: >-
        List only the top-level message threads in the user account identified by `userId`, optionally within the time range bounded by `starttime` and/or `endtime`.
        Top-level messages are the starting point of each message thread (i.e. `parentmessage` == `null`), that is, messages that are not responses to other messages.
      responses:
        '200':
          $ref: '#/components/responses/MessageList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - sessionToken: []
      tags:
        - Messages

  '/message/send/{userId}':
    parameters:
      - $ref: './common/parameters/tidepooluserid.yaml'
    post:
      operationId: CreateMessage
      summary: Create New Top-Level Message
      description: >-
        Creates a new top-level message (thread) in the account identified by `userId`.
        Top-level messages are the starting point of a message thread (i.e. `parentmessage` == `null`), that is, not a response to any other message.
      requestBody:
        content:
          application/json:
            schema:
              $ref: './message/models/newmessage.v1.yaml'
      responses:
        '201':
          $ref: '#/components/responses/MessageCreated'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - sessionToken: []
      tags:
        - Messages

  '/message/reply/{messageId}':
    parameters:
      - $ref: './message/parameters/messageid.v1.yaml'
    post:
      operationId: ReplyToMessage
      summary: Reply to Message
      description: >-
        Adds a reply to an existing message identified by `messageId`.
      requestBody:
        content:
          'application/json':
            schema:
              $ref: './message/models/newmessage.v1.yaml'
      responses:
        '201':
          $ref: '#/components/responses/MessageCreated'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - sessionToken: []
      tags:
        - Messages

  '/message/read/{messageId}':
    parameters:
      - $ref: './message/parameters/messageid.v1.yaml'
    get:
      operationId: FindMessageById
      summary: Get Message by ID
      description: >-
        Returns message identified by `messageId`
      responses:
        '200':
          $ref: '#/components/responses/Message'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - sessionToken: []
      tags:
        - Messages

  '/message/thread/{messageId}':
    parameters:
      - $ref: './message/parameters/messageid.v1.yaml'
    get:
      operationId: GetMessageThread
      summary: Get Message Thread by ID
      description: >-
        Returns message thread identified by `messageId`
      responses:
        '200':
          $ref: '#/components/responses/MessageList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - sessionToken: []
      tags:
        - Messages

  '/message/edit/{messageId}':
    parameters:
      - $ref: './message/parameters/messageid.v1.yaml'
    put:
      operationId: UpdateMessage
      summary: Update Message
      description: >-
        Updates the message identified by `messageId`.
        Either the `timestamp` or the `messagetext` field or both must be supplied in the request body.
        No other fields of the message may be updated.
        The `modifiedtime` field of the message will indicate when the message was last modified.
      requestBody:
        content:
          'application/json':
            schema:
              $ref: './message/models/editmessage.v1.yaml'
      responses:
        '200':
          description: 'Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - sessionToken: []
      tags:
        - Messages

  '/message/remove/{messageId}':
    parameters:
      - $ref: './message/parameters/messageid.v1.yaml'
    delete:
      operationId: DeleteMessage
      summary: Delete Message
      description: >-
        Deletes the message identified by `messageId`.
      responses:
        '202':
          description: 'Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - sessionToken: []
      tags:
        - Messages

components:
  securitySchemes:
    sessionToken:
      $ref: './common/security/tidepoolsessiontoken.v1.yaml'

  responses:
    MessageCreated:
      description: >-
        Message created
      content:
        'application/json':
          schema:
            $ref: './message/models/messageresponse.v1.yaml'

    Message:
      description: >-
        Message.
      content:
        'application/json':
          schema:
            $ref: './message/models/message.v1.yaml'

    MessageList:
      description: >-
        Message list.
      content:
        'application/json':
          schema:
            $ref: './message/models/messagelist.v1.yaml'

    NotFound:
      description: >-
        Not Found. The requested account or message was not found.
      content:
        'application/json':
          schema:
            type: object
            properties:
              messages:
                type: array
                items:
                  type: string

    Unauthorized:
      description: >-
        Unauthorized. The session token is either not present, or it is invalid.
      content:
        'application/json':
          schema:
            type: object
            properties:
              messages:
                type: array
                items:
                  type: string

    Forbidden:
      description: >-
        Forbidden. The session token is valid, but not authorized to access this account.
      content:
        'application/json':
          schema:
            type: object
            properties:
              messages:
                type: array
                items:
                  type: string
