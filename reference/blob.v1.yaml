openapi: 3.0.0
info:
  title: Blob API
  version: '1.0'
  description: |-
    The Tidepool API is an HTTP REST API used by Tidepool clients use to communicate with the Tidepool Platform.

    For more information, see the [Getting Started](../docs/quick-start.md) section.
  termsOfService: https://developer.tidepool.org/terms-of-use
  contact:
    name: Tidepool
    url: 'https://www.tidepool.org/'
    email: support@tidepool.org
  license:
    name: BSD-2-Clause
    url: 'https://github.com/tidepool-org/platform/blob/master/LICENSE'
  x-tidepool-service: https://github.com/tidepool-org/platform/blob

servers:
  - url: 'https://external.integration.tidepool.org'
    description: integration
  - url: 'https://api.tidepool.org'
    description: production
  - url: 'https://dev1.dev.tidepool.org'
    description: dev1
  - url: 'https://qa1.development.tidepool.org'
    description: qa1
  - url: 'https://qa2.development.tidepool.org'
    description: qa2

security:
  - sessionToken: []

tags:
  - name: Internal
    description: >-
      APIs intended for internal use by Tidepool.
  - name: Blobs
    description: >-
      List, create, and manage binary blobs.

      The content format may be anything, because the blobs are treated as opaque data by the service.
      Each blob has a `status`.
      If a blob is created without content, then its status is `created`.
      If the blob is created with content or has been updated to include content then its status is `available`.

paths:
  '/v1/users/{userId}/blobs':
    parameters:
      - $ref: './common/parameters/tidepooluserid.yaml'
    get:
      operationId: ListBlobs
      summary: List Binary Blobs
      description: >-
        List previously uploaded binary blobs in the user's account.
        The list can be filtered with `mediaType` and `status` query parameters.
      parameters:
        - $ref: './blob/parameters/mediatype.v1.yaml'
        - $ref: './blob/parameters/status.v1.yaml'
      responses:
        '200':
          $ref: '#/components/responses/BlobMetadataList'
        # '400':
        #   $ref: './common/responses/badrequest.v1.yaml'
        # '401':
        #   $ref: './common/responses/unauthorized.v1.yaml'
        # '403':
        #   $ref: './common/responses/forbidden.v1.yaml'
        # '404':
        #   $ref: './common/responses/notfound.v1.yaml'
      tags:
        - Blobs
        - Internal
    post:
      operationId: CreateBlob
      summary: Create New Binary Blob
      description: >-
        Creates a new binary blob in the user's account.
        The `Content-Type` and the `Digest` headers must represent
        the media type and MD5 hash of the binary blob content, respectively.
      parameters:
        - $ref: './common/parameters/contenttype.v1.yaml'
        - $ref: './common/parameters/digestmd5.v1.yaml'
      requestBody:
        description: Binary blob
        required: true
        content:
          '*/*':
            schema:
              $ref: './blob/models/content.v1.yaml'
      responses:
        '201':
          $ref: '#/components/responses/BlobMetadata'
        # '400':
        #   $ref: './common/responses/badrequest.v1.yaml'
        # '401':
        #   $ref: './common/responses/unauthorized.v1.yaml'
        # '403':
        #   $ref: './common/responses/forbidden.v1.yaml'
        # '404':
        #   $ref: './common/responses/notfound.v1.yaml'
      tags:
        - Blobs
        - Internal
    delete:
      operationId: DeleteAllBlobs
      summary: Delete All Binary Blobs
      description: >-
        Deletes all previously uploaded binary blobs in the user's account.
      responses:
        '204':
          $ref: './common/responses/nocontent.v1.yaml'
        # '400':
        #   $ref: './common/responses/badrequest.v1.yaml'
        # '401':
        #   $ref: './common/responses/unauthorized.v1.yaml'
        # '403':
        #   $ref: './common/responses/forbidden.v1.yaml'
        # '404':
        #   $ref: './common/responses/notfound.v1.yaml'
      tags:
        - Blobs
        - Internal

  '/v1/blobs/{blobId}':
    parameters:
      - $ref: './blob/parameters/id.v1.yaml'
    get:
      operationId: GetBlobMetadata
      summary: Get Binary Blob Metadata
      description: >-
        Get a previously uploaded binary blob in the user's account.
      responses:
        '200':
          $ref: '#/components/responses/BlobMetadata'
        # '400':
        #   $ref: './common/responses/badrequest.v1.yaml'
        # '401':
        #   $ref: './common/responses/unauthorized.v1.yaml'
        # '403':
        #   $ref: './common/responses/forbidden.v1.yaml'
        # '404':
        #   $ref: './common/responses/notfound.v1.yaml'
      tags:
        - Blobs
        - Internal
    delete:
      operationId: DeleteBlob
      summary: Delete Binary Blob
      description: >-
        Deletes a previously uploaded binary blob in the user's account.
        This operation fails if the `blobId` does not match the ID of an existing blob.
      responses:
        '204':
          $ref: './common/responses/nocontent.v1.yaml'
        # '400':
        #   $ref: './common/responses/badrequest.v1.yaml'
        # '401':
        #   $ref: './common/responses/unauthorized.v1.yaml'
        # '403':
        #   $ref: './common/responses/forbidden.v1.yaml'
        # '404':
        #   $ref: './common/responses/notfound.v1.yaml'
      tags:
        - Blobs
        - Internal

  '/v1/blobs/{blobId}/content':
    parameters:
      - $ref: './blob/parameters/id.v1.yaml'
    get:
      operationId: GetBlobContent
      summary: Get Binary Blob Content
      description: >-
        Retrieves the content of a binary blob in the user's account.
      responses:
        '200':
          $ref: '#/components/responses/BlobContent'
        # '400':
        #   $ref: './common/responses/badrequest.v1.yaml'
        # '401':
        #   $ref: './common/responses/unauthorized.v1.yaml'
        # '403':
        #   $ref: './common/responses/forbidden.v1.yaml'
        # '404':
        #   $ref: './common/responses/notfound.v1.yaml'
      tags:
        - Blobs
        - Internal

components:
  securitySchemes:
    sessionToken:
      $ref: './common/security/tidepoolsessiontoken.v1.yaml'

  responses:
    BlobMetadataList:
      description: List of binary blob metadata
      content:
        'application/json':
          schema:
            $ref: './blob/models/metadatalist.v1.yaml'

    BlobMetadata:
      description: Binary blob metadata
      content:
        'application/json':
          schema:
            $ref: './blob/models/metadata.v1.yaml'
      links:
        DeleteBlob:
          operationId: DeleteBlob
          parameters:
            blobId: '$response.body#/id'
        GetBlobMetadata:
          operationId: GetBlobMetadata
          parameters:
            blobId: '$response.body#/id'
        GetBlobContent:
          operationId: GetBlobContent
          parameters:
            blobId: '$response.body#/id'

    BlobContent:
      description: Binary blob content
      headers:
        'Digest':
          $ref: './common/headers/digestmd5.v1.yaml'
      content:
        '*/*':
          schema:
            $ref: './blob/models/content.v1.yaml'
