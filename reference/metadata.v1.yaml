openapi: 3.0.0
info:
  title: Metadata API
  version: '1.0'
  description: |-
    The Tidepool API is an HTTP REST API used by Tidepool clients use to communicate with the Tidepool Platform.

    For more information, see the [Getting Started](../docs/quick-start.md) section.
  contact:
    name: API Support
    url: https://support.tidepool.org/
    email: support@tidepool.org
  license:
    name: BSD-2-Clause
    url: https://github.com/tidepool-org/seagull/blob/master/LICENSE
  x-tidepool-service: https://github.com/tidepool-org/seagull

servers:
  - url: 'https://external.integration.tidepool.org'
    description: integration
  - url: 'https://api.tidepool.org'
    description: production
  - url: 'https://dev1.dev.tidepool.org'
    description: dev1
  - url: 'https://qa1.development.tidepool.org'
    description: qa1
  - url: 'https://qa2.development.tidepool.org'
    description: qa2

tags:
  - name: Internal
    description: >-
      APIs intended for internal use by Tidepool.
  - name: Metadata
    description: |-
      Create and update user metadata.

paths:
  '/metadata/collections':
    get:
      operationId: GetMetadataCollections
      summary: Get Metadata Collections
      description: >-
        Returns list of valid metadata collections.
      responses:
        '200':
          description: 'Success'
          content:
            'application/json':
              schema:
                $ref: './metadata/models/collectionnames.v1.yaml'
      security:
        - sessionToken: []
      tags:
        - Metadata

  '/metadata/{userId}/{collectionName}':
    parameters:
      - $ref: './common/parameters/tidepooluserid.yaml'
      - $ref: './metadata/parameters/collectionname.v1.yaml'
    get:
      operationId: GetUserMetadataCollection
      summary: Get User Metadata Collection
      description: >-
        Returns the user's metadata collection corresponding to `collectionName`.
        Each metadata collection is an unbounded JSON object with client-defined fields.
      responses:
        '200':
          $ref: '#/components/responses/MetadataCollection'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - sessionToken: []
      tags:
        - Metadata

    post:
      operationId: UpdateUserMetadataCollectionPost
      summary: Update User Metadata Collection
      description: >-
        Updates the user's metadata collection corresponding to `collectionName`.
        Each metadata collection is an unbounded JSON object with client-defined fields.
      requestBody:
        $ref: '#/components/requestBodies/MetadataCollection'
      responses:
        '200':
          $ref: '#/components/responses/MetadataCollection'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - sessionToken: []
      tags:
        - Metadata

    put:
      operationId: UpdateUserMetadataCollectionPut
      summary: Update User Metadata Collection
      description: >-
        Updates the user's metadata collection corresponding to `collectionName`.
        Each metadata collection is an unbounded JSON object with client-defined fields.
      requestBody:
        $ref: '#/components/requestBodies/MetadataCollection'
      responses:
        '200':
          $ref: '#/components/responses/MetadataCollection'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - sessionToken: []
      tags:
        - Metadata

    # delete:
    #   operationId: DeleteUserMetadataCollection
    #   summary: Delete User Metadata Collection
    #   description: >-
    #     Deletes the user's metadata collection corresponding to `collectionName`.
    #     Each metadata collection is an unbounded JSON object with client-defined fields.
    #   responses:
    #     '501':
    #       description: 'Not Implemented'
    #   security:
    #     - sessionToken: []
    #   tags:
    #     - Metadata
    #     - Internal

  '/metadata/{userId}/private/{fieldName}':
    parameters:
      - $ref: './common/parameters/tidepooluserid.yaml'
      - $ref: './metadata/parameters/fieldname.v1.yaml'
    get:
      operationId: GetUserPrivateMetadataItem
      summary: Get User's Private Metadata Item
      description: >-
        Returns the named item from the user's private metadata collection.
      responses:
        '200':
          description: ''
      security:
        - serverToken: []
      tags:
        - Metadata
        - Internal

    # delete:
    #   operationId: DeleteUserPrivateMetadataItem
    #   summary: Delete User's Private Metadata Item
    #   description: >-
    #     Deletes the named item in the user's private metadata collection.
    #   responses:
    #     '501':
    #       description: 'Not Implemented'
    #   security:
    #     - serverToken: []
    #   tags:
    #     - Metadata
    #     - Internal

  '/metadata/users/{userId}/users':
    parameters:
      - $ref: './common/parameters/tidepooluserid.yaml'
    get:
      operationId: ListUsers
      summary: List Users
      description: >-
        List all users who have trustee or trustor access to the user account identified by `userId`.
      responses:
        '200':
          $ref: '#/components/responses/TrustUsers'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - Metadata
      security:
        - sessionToken: []

components:
  securitySchemes:
    sessionToken:
      $ref: './common/security/tidepoolsessiontoken.v1.yaml'

    serverToken:
      $ref: './common/security/tidepoolservertoken.v1.yaml'

  requestBodies:
    MetadataCollection:
      content:
        'application/json':
          schema:
            $ref: './metadata/models/collection.v1.yaml'

  responses:
    MetadataCollection:
      description: 'Success'
      content:
        'application/json':
          schema:
            $ref: './metadata/models/collection.v1.yaml'

    TrustUsers:
      description: 'Success'
      content:
        application/json:
          schema:
            $ref: './metadata/models/trustusers.v1.yaml'

    Unauthorized:
      description: 'Unauthorized'

    NotFound:
      description: 'Not Found'
